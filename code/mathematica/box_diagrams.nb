(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    166630,       3461]
NotebookOptionsPosition[     69609,       1696]
NotebookOutlinePosition[    161787,       3385]
CellTagsIndexPosition[    161744,       3382]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Import", " ", "packages"}], "*)"}], "\n", 
  RowBox[{"(*", 
   RowBox[{"<<", " ", "PVReduce`"}], "*)"}], "\n", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Remove", "[", "PVReduce`Dot", "]"}], ";"}], "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"$LoadAddOns", "=", 
     RowBox[{"{", "\"\<FeynArts\>\"", "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"$FeynCalcStartupMessages", " ", "=", " ", "False"}], ";"}], "\n", 
   RowBox[{"<<", " ", "FeynCalc`"}], "\n", 
   RowBox[{
    RowBox[{"$FAVerbose", " ", "=", " ", "0"}], ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"AppendTo", "[", 
     RowBox[{"$Path", ",", 
      RowBox[{"FileNameJoin", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"NotebookDirectory", "[", "]"}], ",", " ", 
         "\"\<include\>\""}], "}"}], "]"}]}], "]"}], ";"}], "\n", 
   RowBox[{"<<", " ", "XSec`"}], "\[IndentingNewLine]", 
   RowBox[{"<<", " ", "TreeLevel`"}]}]}]], "Code",
 InitializationCell->False,
 CellChangeTimes->{{3.907054899424622*^9, 3.907054903026018*^9}, {
   3.90705529709433*^9, 3.907055325388769*^9}, 3.9070553681318665`*^9, {
   3.9071152556440916`*^9, 3.9071152609975185`*^9}, {3.90711538094141*^9, 
   3.9071153811051836`*^9}, {3.9071154823655972`*^9, 3.907115484655085*^9}, {
   3.9071155398785477`*^9, 3.907115551170269*^9}, {3.907115862458528*^9, 
   3.907115874475348*^9}, {3.907117951824506*^9, 3.907117952593457*^9}, {
   3.907120829774817*^9, 3.9071208312643175`*^9}, {3.9071242236837683`*^9, 
   3.907124226756534*^9}, {3.90712794885926*^9, 3.907127949501032*^9}, {
   3.9071288346051555`*^9, 3.907128835244875*^9}, {3.907139967578509*^9, 
   3.907139982143112*^9}, {3.907293539222071*^9, 3.9072936001745253`*^9}, {
   3.9072937070501*^9, 3.9072937569270563`*^9}, {3.907293854932821*^9, 
   3.907293857320144*^9}, {3.907744046379108*^9, 3.9077440488850136`*^9}, {
   3.907757038702188*^9, 3.907757050444944*^9}, {3.907771494203401*^9, 
   3.907771507203731*^9}, 3.9077716795915627`*^9, {3.907771988902755*^9, 
   3.907771989457121*^9}, {3.907772093275315*^9, 3.907772103043915*^9}, {
   3.907857761864567*^9, 3.9078577664923477`*^9}, {3.907917675295986*^9, 
   3.907917675588395*^9}, {3.907917794277478*^9, 3.907917800939808*^9}, 
   3.907934818680952*^9, 3.908272313694349*^9, 3.9083628672553806`*^9, {
   3.915009713350086*^9, 
   3.915009714750289*^9}},ExpressionUUID->"d58c0d61-2f86-44c4-9987-\
1aa47ea7b92b"],

Cell[BoxData[
 TemplateBox[{
  "Get", "noopen", 
   "\"Cannot open \\!\\(\\*RowBox[{\\\"\\\\\\\"XSec`\\\\\\\"\\\"}]\\).\"", 2, 
   6, 1, 24944610262854947555, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.908448252671276*^9, 3.915009676568038*^9},
 CellLabel->
  "During evaluation of \
In[1]:=",ExpressionUUID->"39042113-4174-413c-b911-b3a45b5c5aac"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{3.9150096765931883`*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"ce0ccad1-cbde-4f25-99ae-17fa84b99ae0"],

Cell[BoxData[
 TemplateBox[{
  "Get", "noopen", 
   "\"Cannot open \
\\!\\(\\*RowBox[{\\\"\\\\\\\"TreeLevel`\\\\\\\"\\\"}]\\).\"", 2, 7, 2, 
   24944610262854947555, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.908448252671276*^9, 3.915009676598979*^9},
 CellLabel->
  "During evaluation of \
In[1]:=",ExpressionUUID->"1ddf6934-0ff4-4fd3-96eb-32462f981d2d"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{3.915009676614484*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"322790e9-4f03-49a0-a991-c7d76d74eb9a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Why", " ", "is", " ", 
    RowBox[{"this", "?"}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"$KeepLogDivergentScalelessIntegrals", "=", "True"}], 
   ";"}]}]], "Input",
 CellChangeTimes->{
  3.907041242472334*^9, {3.907139986094236*^9, 3.9071399927524786`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"7250dd46-7286-4c14-b071-5d36007ccb97"],

Cell[CellGroupData[{

Cell["Get Feynman diagrams", "Subtitle",
 CellChangeTimes->{{3.907140058728392*^9, 
  3.907140119946419*^9}},ExpressionUUID->"2b889070-5833-462e-8e31-\
bd89c1d98428"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"BoxDiagrams", " ", "=", " ", 
   RowBox[{"InsertFields", "[", 
    RowBox[{
     RowBox[{"CreateTopologies", "[", 
      RowBox[{"1", ",", " ", 
       RowBox[{"2", "->", "2"}], ",", 
       RowBox[{"ExcludeTopologies", "->", 
        RowBox[{"{", 
         RowBox[{"Triangles", ",", "SelfEnergies", ",", "Tadpoles"}], 
         "}"}]}]}], "]"}], ",", " ", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"F", "[", 
         RowBox[{"3", ",", " ", 
          RowBox[{"{", 
           RowBox[{"1", ",", "a"}], "}"}]}], "]"}], ",", " ", 
        RowBox[{"-", 
         RowBox[{"F", "[", 
          RowBox[{"3", ",", " ", 
           RowBox[{"{", 
            RowBox[{"1", ",", "b"}], "}"}]}], "]"}]}]}], "}"}], " ", "->", 
      " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"F", "[", 
         RowBox[{"11", ",", " ", 
          RowBox[{"{", "i", "}"}]}], "]"}], ",", " ", 
        RowBox[{"F", "[", 
         RowBox[{"11", ",", " ", 
          RowBox[{"{", "j", "}"}]}], "]"}]}], "}"}]}], ",", " ", 
     RowBox[{"InsertionLevel", " ", "->", " ", 
      RowBox[{"{", "Classes", "}"}]}], ",", " ", 
     RowBox[{"Model", " ", "->", " ", "MSSMQCD"}], ",", 
     RowBox[{"Restrictions", "->", 
      RowBox[{"{", 
       RowBox[{"NoLightFHCoupling", ",", "NoElectronHCoupling"}], "}"}]}], 
     ",", 
     RowBox[{"ExcludeParticles", "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"V", "[", "1", "]"}], ",", 
        RowBox[{"V", "[", "2", "]"}], ",", 
        RowBox[{"V", "[", "3", "]"}], ",", 
        RowBox[{"F", "[", "11", "]"}], ",", 
        RowBox[{"F", "[", "12", "]"}], ",", 
        RowBox[{"S", "[", "1", "]"}], ",", 
        RowBox[{"S", "[", "2", "]"}], ",", 
        RowBox[{"S", "[", "3", "]"}], ",", 
        RowBox[{"S", "[", "4", "]"}]}], "}"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Paint", "[", 
   RowBox[{"BoxDiagrams", ",", " ", 
    RowBox[{"Numbering", "->", "Simple"}], ",", " ", 
    RowBox[{"ImageSize", "->", 
     RowBox[{"{", 
      RowBox[{"512", ",", "256"}], "}"}]}]}], "]"}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.906604857035619*^9, 3.9066048608085403`*^9}, {
   3.9066049854736342`*^9, 3.906604992377365*^9}, {3.906605085078715*^9, 
   3.906605087190976*^9}, {3.906605139144172*^9, 3.906605157173471*^9}, {
   3.9066089501123238`*^9, 3.9066089549395323`*^9}, {3.906611397640761*^9, 
   3.9066114248615427`*^9}, {3.906611546248643*^9, 3.9066115466008434`*^9}, {
   3.90661163112945*^9, 3.906611635198211*^9}, {3.906611715522266*^9, 
   3.906611718089326*^9}, {3.906611832155679*^9, 3.906611870840233*^9}, {
   3.906611925691583*^9, 3.906612026594898*^9}, {3.906612151545149*^9, 
   3.906612174592226*^9}, {3.9066125584132347`*^9, 3.906612570375441*^9}, {
   3.906612626292842*^9, 3.9066126296286798`*^9}, {3.906623482053104*^9, 
   3.906623487790579*^9}, 3.906623592535813*^9, {3.906701089866891*^9, 
   3.9067011003140507`*^9}, 3.906708358227268*^9, {3.9067897234122934`*^9, 
   3.9067897389090586`*^9}, {3.906789803076337*^9, 3.906789819337664*^9}, {
   3.906790682003494*^9, 3.906790685179728*^9}, {3.9067907224131355`*^9, 
   3.906790760249133*^9}, {3.9067907991720266`*^9, 3.9067908098222375`*^9}, {
   3.9067908437218657`*^9, 3.906790907111885*^9}, {3.907119640391697*^9, 
   3.907119641344738*^9}, {3.907120234210956*^9, 3.907120265939155*^9}, {
   3.907120339375261*^9, 3.907120429526476*^9}, {3.907120480511257*^9, 
   3.907120482361685*^9}, {3.9071273603835716`*^9, 3.907127366861003*^9}, {
   3.907143011845445*^9, 3.9071430145834355`*^9}, {3.9077385693061485`*^9, 
   3.9077385715420737`*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"888d81c6-8914-4b27-8a0f-317975cc5513"],

Cell[BoxData[
 FormBox[
  GraphicsBox[{InsetBox[
     GraphicsBox[
      TagBox[
       TooltipBox[
        {Thickness[0.005], 
         LineBox[{{-9.094947017729282*^-13, 15.}, {6.500000000001819, 13.5}}],
          PolygonBox[{{3.8346347174167716`, 14.115084295980745`}, {
          2.575421479903725, 13.995159225741407`}, {2.7553090852627315`, 
          14.774672182297103`}}], InsetBox[
          TagBox[
           StyleBox[
            TagBox["u",
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->8.88595041322314],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            8.88595041322314]& ], {3.5985322353830753, 15.155506353326661}, 
          NCache[ImageScaled[{Rational[1, 2], 0}], ImageScaled[{0.5, 0}]]], 
         LineBox[{{-9.094947017729282*^-13, 5.}, {6.5, 6.5}}], 
         PolygonBox[{{2.6653652825832284`, 5.615084295980745}, {
          3.924578520096275, 5.495159225741407}, {3.7446909147372685`, 
          6.2746721822971026`}}], InsetBox[
          TagBox[
           StyleBox[
            TagBox["u",
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->8.88595041322314],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            8.88595041322314]& ], {3.5985322353830753, 4.84449364667334}, 
          NCache[ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]]], 
         LineBox[{{20.00000000000182, 14.999999999996362`}, {13.5, 
          13.499999999996362`}}], InsetBox[
          TagBox[
           StyleBox[
            TagBox[
             SubsuperscriptBox[
              OverscriptBox["\[Chi]", "~"], "i", "0"],
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->8.88595041322314],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            8.88595041322314]& ], {16.457682641291616, 14.911908554403006}, 
          NCache[ImageScaled[{Rational[1, 2], 0}], ImageScaled[{0.5, 0}]]], 
         LineBox[{{20., 5.}, {13.49999999999909, 6.5}}], InsetBox[
          TagBox[
           StyleBox[
            TagBox[
             SubsuperscriptBox[
              OverscriptBox["\[Chi]", "~"], "j", "0"],
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->8.88595041322314],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            8.88595041322314]& ], {16.457682641291616, 5.088091445596994}, 
          NCache[ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]]], 
         LineBox[{{6.5, 13.49999999999741}, {6.5, 6.49999999999371}}], 
         InsetBox[
          TagBox[
           StyleBox[
            TagBox[
             OverscriptBox["g", "~"],
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->8.88595041322314],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            8.88595041322314]& ], {5.8048, 10.}, NCache[
          ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]]], 
         {Dashing[{0.030000000000000002`, 0.030000000000000002`}], 
          LineBox[{{6.499999999998151, 13.5}, {13.49999999999741, 13.5}}]}, 
         PolygonBox[{{10.6, 13.5}, {9.4, 13.1}, {9.4, 13.9}}], InsetBox[
          TagBox[
           StyleBox[
            TagBox[
             SuperscriptBox[
              OverscriptBox["u", "~"], "w"],
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->8.88595041322314],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            8.88595041322314]& ], {10., 14.4452}, NCache[
          ImageScaled[{Rational[1, 2], 0}], ImageScaled[{0.5, 0}]]], 
         {Dashing[{0.030000000000000002`, 0.030000000000000002`}], 
          LineBox[{{6.499999999998151, 6.5}, {13.49999999999741, 6.5}}]}, 
         PolygonBox[{{9.4, 6.5}, {10.6, 6.1}, {10.6, 6.9}}], InsetBox[
          TagBox[
           StyleBox[
            TagBox[
             SuperscriptBox[
              OverscriptBox["u", "~"], "x"],
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->8.88595041322314],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            8.88595041322314]& ], {10., 5.5548}, NCache[
          ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]]], 
         LineBox[{{13.5, 13.49999999999741}, {13.5, 6.49999999999371}}], 
         PolygonBox[{{13.5, 9.4}, {13.1, 10.6}, {13.9, 10.6}}], InsetBox[
          TagBox[
           StyleBox[
            TagBox["u",
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->8.88595041322314],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            8.88595041322314]& ], {14.4452, 10.}, NCache[
          ImageScaled[{0, Rational[1, 2]}], ImageScaled[{0, 0.5}]]], 
         {PointSize[0.04], PointBox[{6.5, 13.5}], PointBox[{6.5, 6.5}], 
          PointBox[{13.5, 13.5}], PointBox[{13.5, 6.5}]}, InsetBox[
          TagBox[
           StyleBox[
            TagBox["1",
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->7.108760330578512],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            7.108760330578512]& ], {10., -0.5}, NCache[
          ImageScaled[{Rational[1, 2], 0}], ImageScaled[{0.5, 0}]]]},
        "\"aebf/cgdh/efegfhgh.m\"",
        TooltipStyle->"TextStyling"],
       Annotation[#, "aebf/cgdh/efegfhgh.m", "Tooltip"]& ],
      AspectRatio->1,
      PlotRange->{{-1, 21}, {-1, 21}}], {0, 44}, {0, 0}, {22, 22}], InsetBox[
     GraphicsBox[
      TagBox[
       TooltipBox[
        {Thickness[0.005], 
         LineBox[{{-9.094947017729282*^-13, 15.}, {6.500000000001819, 13.5}}],
          PolygonBox[{{3.8346347174167716`, 14.115084295980745`}, {
          2.575421479903725, 13.995159225741407`}, {2.7553090852627315`, 
          14.774672182297103`}}], InsetBox[
          TagBox[
           StyleBox[
            TagBox["u",
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->8.88595041322314],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            8.88595041322314]& ], {3.5985322353830753, 15.155506353326661}, 
          NCache[ImageScaled[{Rational[1, 2], 0}], ImageScaled[{0.5, 0}]]], 
         LineBox[{{-9.094947017729282*^-13, 5.}, {6.5, 6.5}}], 
         PolygonBox[{{2.6653652825832284`, 5.615084295980745}, {
          3.924578520096275, 5.495159225741407}, {3.7446909147372685`, 
          6.2746721822971026`}}], InsetBox[
          TagBox[
           StyleBox[
            TagBox["u",
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->8.88595041322314],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            8.88595041322314]& ], {3.5985322353830753, 4.84449364667334}, 
          NCache[ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]]], 
         LineBox[{{20.00000000000182, 14.999999999996362`}, {13.5, 
          13.499999999996362`}}], InsetBox[
          TagBox[
           StyleBox[
            TagBox[
             SubsuperscriptBox[
              OverscriptBox["\[Chi]", "~"], "i", "0"],
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->8.88595041322314],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            8.88595041322314]& ], {16.457682641291616, 14.911908554403006}, 
          NCache[ImageScaled[{Rational[1, 2], 0}], ImageScaled[{0.5, 0}]]], 
         LineBox[{{20., 5.}, {13.49999999999909, 6.5}}], InsetBox[
          TagBox[
           StyleBox[
            TagBox[
             SubsuperscriptBox[
              OverscriptBox["\[Chi]", "~"], "j", "0"],
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->8.88595041322314],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            8.88595041322314]& ], {16.457682641291616, 5.088091445596994}, 
          NCache[ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]]], 
         LineBox[CompressedData["
1:eJxFlgs0VGsUx08pRSmkW+fMnMKYM2d6GVMpvWwJcz0iSehBiBTSm2qQS7FS
EUUPcnuJVjUVKSF1y03qppdQJkVSk/JKRm7ud9a1vmatWbN+a8/Z59v7+/b/
/xn5rnddPZAgiH3oy/3+/6HAvbEPfUggdGNPbEolIcDioexOFAWEYVWTyJoE
/VzGKFSfBwS8SLysS0Lv0Gs6jlcQJ3mEN/eNhZ/EcrbJg4+et75RokeCfXuF
5+o+jksapDYkyBSjRnZm0ihfxsGVaSSMN5hdY2g2DojoIMssDQo+7fYImK1A
LGkepfyDgjYq9NDZMeNR/g2tdbo88HnnOIjnj1h3i+LCSR6IbI4srUpBLFn6
cLQZH9LntaTknUVcmf5uZB4fKsCYL83k4r9vn2VCQ9f0Dgt3OeLWyRHWO2go
qQ1cs0fG5ZcvtM6jISSr/KXDYC7/80saD2kYYOFwS30Drac1//Pk2zTMJJzU
y0K49X2dszKVBmrj/JEuDGKf/R2UjIZM1+CZfipUX7TbaEU9Hz6lFdRtuoM4
yc+7zY8PpsopncsVXDx8dlM1D/z0ZrRfuo5Y136Fvx0PrK9puO6qQ0w0lmQW
UJD7uivefjzXnxeel8woaBlaxjTsREwssjMuJmHq96RdyR1cPLYu3oeENWZz
CGkUWr9LTAtlhPbr1aMACx1DIEojItYNJMHbrd4hyRtxkonxdE0SqqStGnAV
sWTwNKtJJCTmyje9HGSE6rlStHYjCQaftAs1FiEuPb+j+DkJ6xzi2dJUxJWd
Xy86UbBD1/mfXY8QQ7F9aBUFhl7vRcvViBVdd20DeRCcukDJH2OMOOHhiG4e
OD8o1FzBIIZndzOi+dBQ5KTaLUKclVRgpeaDTYdQq5KH2OeU25RlNOwPO3Zc
NBhxpbpPmUVD02n/AqoJ5ZfUBgaUobhu26ZLtxFnydjschqk9Vc9LI4hrhc7
bMylQaDq8RZv5erZ15KwloZzB8KXvl7C1dPbsEeHhp/x633XzkVM2FfkpPPh
YoLQc7sp93zAxjh9PlhtqIjnTUFsqFTmxPAgvWLbj+xZ3PvdbaRtFFx0lH5T
cPlcllGLAigQ3TQv7Yrkntd6WvMR9dfzgmVwPuKkQ92PY0g4qrD5zfY74tZ6
YuAMEsYWtuw2mI/q082R52uToEooP9p0kOvXn5FBBOq/l3fy5ibEEt+9V8aS
EB3lbO5sIQAizGKB1JWEjILOML14xK0VRudzUP4RfVbJjxFLFpubUhSEtK5a
p6NjgvKHOAVmUBDdaWe6ZB7i+guBXybyIOJQUPOHVYhdwoKKinnw1GpinvY2
7v+26iP2fCi/n9b1VI5YIdFMe8CHxhOBRkIu7vPWTm5Ow53ay5XZ/ogNT9vM
jKdBP2xY93kZF+8dMvkmDff4svBhDOLS/NidaJ7CP3P6IsDxSUUFezprBPj5
N2s6h7gVCHB+059Oph7HBPj9qY7pylqu3v71KQRrtCbHCPD6s3OfO3zj4v31
9bkfHjM2U4Dr7/5eUJl7+1d/hvdmpLa3/+qfso4oCZWY4P6+mjbswBeu3v7+
q4MV5YoyE7w//gezQveSQrx/+33NV5MhQry/1eP0I1TFQrz/7mzhxxtDGXw+
qCjX0hR7Bp+fB3S5pdYuBp8v68RH2s65DD5/HjrxgzzuMfh8KgKnbWt8wuDz
a+1cezauksHne7tfUsahOww+/5XL95wTcPn658N9wOCsqgQGz4/tcMfsMn8G
z5fq1YhEl3kMnr8Uu2Oy9ySD51O1w9+vukeI53eauqbLtFGI5/uw6RWDiGoh
nn+xsY36ZI0Q64OOx02jhmYh1o8nkVT1KU0G68uW+wqzSCmD9Sdu37aXlusY
rE+vv3Ta9F5ksH75T4lJZH8wWN+osyN7bzmKsP4lx47PW58lwvqo/NfsSFm7
COvn3Wdv+wKAxfr6JmyG5YzdLNbfgc3Hg/ffZrE+m0TG3vRqZbF+L9X76W6p
J8b6/rdfo+Y5gRjr/yp5c9wTkRj7Q6yhiV7ZODH2D/Ff5X4LtcXYX4Kvrux+
+ZnF/rMi2FPDtZzF/hQ2x8tQ4xSL/atwKM/AS85ifzuoqnAoWsb+8r+5mg1u
Viz2x73Xv7Q1SVjsn2cstK6dmcRif11hPvW5gTmL/bc0sEbe7sRifybeyPIn
bWaxfw/Keeb4LpvF/h7k65uy/gOL/d/NYGt3nESM7weLO8jFTtFifH/oUT1R
JT4T4/tFzwcTdQ0zAd8/wtKCv97fOgHfT+49PvJqXCni/vvLwh5OXybAf1Pu
Z3Y=
          "]], InsetBox[
          TagBox[
           StyleBox[
            TagBox["g",
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->8.88595041322314],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            8.88595041322314]& ], {5.5548, 10.}, NCache[
          ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]]], 
         LineBox[{{6.499999999998151, 13.5}, {13.49999999999741, 13.5}}], 
         PolygonBox[{{10.6, 13.5}, {9.4, 13.1}, {9.4, 13.9}}], InsetBox[
          TagBox[
           StyleBox[
            TagBox["u",
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->8.88595041322314],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            8.88595041322314]& ], {10., 14.4452}, NCache[
          ImageScaled[{Rational[1, 2], 0}], ImageScaled[{0.5, 0}]]], 
         LineBox[{{6.499999999998151, 6.5}, {13.49999999999741, 6.5}}], 
         PolygonBox[{{9.4, 6.5}, {10.6, 6.1}, {10.6, 6.9}}], InsetBox[
          TagBox[
           StyleBox[
            TagBox["u",
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->8.88595041322314],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            8.88595041322314]& ], {10., 5.5548}, NCache[
          ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]]], 
         {Dashing[{0.030000000000000002`, 0.030000000000000002`}], 
          LineBox[{{13.5, 13.49999999999741}, {13.5, 6.49999999999371}}]}, 
         PolygonBox[{{13.5, 9.4}, {13.1, 10.6}, {13.9, 10.6}}], InsetBox[
          TagBox[
           StyleBox[
            TagBox[
             SuperscriptBox[
              OverscriptBox["u", "~"], "w"],
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->8.88595041322314],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            8.88595041322314]& ], {14.4452, 10.}, NCache[
          ImageScaled[{0, Rational[1, 2]}], ImageScaled[{0, 0.5}]]], 
         {PointSize[0.04], PointBox[{6.5, 13.5}], PointBox[{6.5, 6.5}], 
          PointBox[{13.5, 13.5}], PointBox[{13.5, 6.5}]}, InsetBox[
          TagBox[
           StyleBox[
            TagBox["2",
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->7.108760330578512],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            7.108760330578512]& ], {10., -0.5}, NCache[
          ImageScaled[{Rational[1, 2], 0}], ImageScaled[{0.5, 0}]]]},
        "\"aebf/cgdh/efegfhgh.m\"",
        TooltipStyle->"TextStyling"],
       Annotation[#, "aebf/cgdh/efegfhgh.m", "Tooltip"]& ],
      AspectRatio->1,
      PlotRange->{{-1, 21}, {-1, 21}}], {22, 44}, {0, 0}, {22, 22}], 
    InsetBox[
     GraphicsBox[
      TagBox[
       TooltipBox[
        {Thickness[0.005], 
         LineBox[{{-9.094947017729282*^-13, 15.}, {6.500000000001819, 13.5}}],
          PolygonBox[{{3.8346347174167716`, 14.115084295980745`}, {
          2.575421479903725, 13.995159225741407`}, {2.7553090852627315`, 
          14.774672182297103`}}], InsetBox[
          TagBox[
           StyleBox[
            TagBox["u",
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->8.88595041322314],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            8.88595041322314]& ], {3.5985322353830753, 15.155506353326661}, 
          NCache[ImageScaled[{Rational[1, 2], 0}], ImageScaled[{0.5, 0}]]], 
         LineBox[{{-9.094947017729282*^-13, 5.}, {6.5, 6.5}}], 
         PolygonBox[{{2.6653652825832284`, 5.615084295980745}, {
          3.924578520096275, 5.495159225741407}, {3.7446909147372685`, 
          6.2746721822971026`}}], InsetBox[
          TagBox[
           StyleBox[
            TagBox["u",
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->8.88595041322314],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            8.88595041322314]& ], {3.5985322353830753, 4.84449364667334}, 
          NCache[ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]]], 
         LineBox[{{20., 15.000000000001819`}, {13.500000000001819`, 
          6.500000000003638}}], InsetBox[
          TagBox[
           StyleBox[
            TagBox[
             SubsuperscriptBox[
              OverscriptBox["\[Chi]", "~"], "i", "0"],
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->8.88595041322314],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            8.88595041322314]& ], {18.303965411250058, 13.545197797364949}, 
          ImageScaled[{1, 0}]], 
         LineBox[{{20.00000000000182, 5.}, {13.500000000001819`, 13.5}}], 
         InsetBox[
          TagBox[
           StyleBox[
            TagBox[
             SubsuperscriptBox[
              OverscriptBox["\[Chi]", "~"], "j", "0"],
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->8.88595041322314],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            8.88595041322314]& ], {18.154588849929652, 6.704746382118519}, 
          ImageScaled[{1, 1}]], 
         LineBox[{{6.5, 13.49999999999741}, {6.5, 6.49999999999371}}], 
         InsetBox[
          TagBox[
           StyleBox[
            TagBox[
             OverscriptBox["g", "~"],
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->8.88595041322314],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            8.88595041322314]& ], {5.8048, 10.}, NCache[
          ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]]], 
         {Dashing[{0.030000000000000002`, 0.030000000000000002`}], 
          LineBox[{{6.499999999998151, 13.5}, {13.49999999999741, 13.5}}]}, 
         PolygonBox[{{10.6, 13.5}, {9.4, 13.1}, {9.4, 13.9}}], InsetBox[
          TagBox[
           StyleBox[
            TagBox[
             SuperscriptBox[
              OverscriptBox["u", "~"], "w"],
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->8.88595041322314],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            8.88595041322314]& ], {10., 14.4452}, NCache[
          ImageScaled[{Rational[1, 2], 0}], ImageScaled[{0.5, 0}]]], 
         {Dashing[{0.030000000000000002`, 0.030000000000000002`}], 
          LineBox[{{6.499999999998151, 6.5}, {13.49999999999741, 6.5}}]}, 
         PolygonBox[{{9.4, 6.5}, {10.6, 6.1}, {10.6, 6.9}}], InsetBox[
          TagBox[
           StyleBox[
            TagBox[
             SuperscriptBox[
              OverscriptBox["u", "~"], "x"],
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->8.88595041322314],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            8.88595041322314]& ], {10., 5.5548}, NCache[
          ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]]], 
         LineBox[{{13.5, 6.5}, {13.5, 13.5}}], 
         PolygonBox[{{13.5, 9.4}, {13.9, 10.6}, {13.1, 10.6}}], InsetBox[
          TagBox[
           StyleBox[
            TagBox["u",
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->8.88595041322314],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            8.88595041322314]& ], {12.5548, 10.}, NCache[
          ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]]], 
         {PointSize[0.04], PointBox[{6.5, 13.5}], PointBox[{6.5, 6.5}], 
          PointBox[{13.5, 6.5}], PointBox[{13.5, 13.5}]}, InsetBox[
          TagBox[
           StyleBox[
            TagBox["3",
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->7.108760330578512],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            7.108760330578512]& ], {10., -0.5}, NCache[
          ImageScaled[{Rational[1, 2], 0}], ImageScaled[{0.5, 0}]]]},
        "\"aebf/cgdh/efehfggh.m\"",
        TooltipStyle->"TextStyling"],
       Annotation[#, "aebf/cgdh/efehfggh.m", "Tooltip"]& ],
      AspectRatio->1,
      PlotRange->{{-1, 21}, {-1, 21}}], {44, 44}, {0, 0}, {22, 22}], 
    InsetBox[
     GraphicsBox[
      TagBox[
       TooltipBox[
        {Thickness[0.005], 
         LineBox[{{-9.094947017729282*^-13, 15.}, {6.500000000001819, 13.5}}],
          PolygonBox[{{3.8346347174167716`, 14.115084295980745`}, {
          2.575421479903725, 13.995159225741407`}, {2.7553090852627315`, 
          14.774672182297103`}}], InsetBox[
          TagBox[
           StyleBox[
            TagBox["u",
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->8.88595041322314],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            8.88595041322314]& ], {3.5985322353830753, 15.155506353326661}, 
          NCache[ImageScaled[{Rational[1, 2], 0}], ImageScaled[{0.5, 0}]]], 
         LineBox[{{-9.094947017729282*^-13, 5.}, {6.5, 6.5}}], 
         PolygonBox[{{2.6653652825832284`, 5.615084295980745}, {
          3.924578520096275, 5.495159225741407}, {3.7446909147372685`, 
          6.2746721822971026`}}], InsetBox[
          TagBox[
           StyleBox[
            TagBox["u",
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->8.88595041322314],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            8.88595041322314]& ], {3.5985322353830753, 4.84449364667334}, 
          NCache[ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]]], 
         LineBox[{{20., 15.000000000001819`}, {13.500000000001819`, 
          6.500000000003638}}], InsetBox[
          TagBox[
           StyleBox[
            TagBox[
             SubsuperscriptBox[
              OverscriptBox["\[Chi]", "~"], "i", "0"],
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->8.88595041322314],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            8.88595041322314]& ], {18.303965411250058, 13.545197797364949}, 
          ImageScaled[{1, 0}]], 
         LineBox[{{20.00000000000182, 5.}, {13.500000000001819`, 13.5}}], 
         InsetBox[
          TagBox[
           StyleBox[
            TagBox[
             SubsuperscriptBox[
              OverscriptBox["\[Chi]", "~"], "j", "0"],
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->8.88595041322314],
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            8.88595041322314]& ], {18.154588849929652, 6.704746382118519}, 
          ImageScaled[{1, 1}]], LineBox[CompressedData["
1:eJxFlgs0VGsUx08pRSmkW+fMnMKYM2d6GVMpvWwJcz0iSehBiBTSm2qQS7FS
EUUPcnuJVjUVKSF1y03qppdQJkVSk/JKRm7ud9a1vmatWbN+a8/Z59v7+/b/
/xn5rnddPZAgiH3oy/3+/6HAvbEPfUggdGNPbEolIcDioexOFAWEYVWTyJoE
/VzGKFSfBwS8SLysS0Lv0Gs6jlcQJ3mEN/eNhZ/EcrbJg4+et75RokeCfXuF
5+o+jksapDYkyBSjRnZm0ihfxsGVaSSMN5hdY2g2DojoIMssDQo+7fYImK1A
LGkepfyDgjYq9NDZMeNR/g2tdbo88HnnOIjnj1h3i+LCSR6IbI4srUpBLFn6
cLQZH9LntaTknUVcmf5uZB4fKsCYL83k4r9vn2VCQ9f0Dgt3OeLWyRHWO2go
qQ1cs0fG5ZcvtM6jISSr/KXDYC7/80saD2kYYOFwS30Drac1//Pk2zTMJJzU
y0K49X2dszKVBmrj/JEuDGKf/R2UjIZM1+CZfipUX7TbaEU9Hz6lFdRtuoM4
yc+7zY8PpsopncsVXDx8dlM1D/z0ZrRfuo5Y136Fvx0PrK9puO6qQ0w0lmQW
UJD7uivefjzXnxeel8woaBlaxjTsREwssjMuJmHq96RdyR1cPLYu3oeENWZz
CGkUWr9LTAtlhPbr1aMACx1DIEojItYNJMHbrd4hyRtxkonxdE0SqqStGnAV
sWTwNKtJJCTmyje9HGSE6rlStHYjCQaftAs1FiEuPb+j+DkJ6xzi2dJUxJWd
Xy86UbBD1/mfXY8QQ7F9aBUFhl7vRcvViBVdd20DeRCcukDJH2OMOOHhiG4e
OD8o1FzBIIZndzOi+dBQ5KTaLUKclVRgpeaDTYdQq5KH2OeU25RlNOwPO3Zc
NBhxpbpPmUVD02n/AqoJ5ZfUBgaUobhu26ZLtxFnydjschqk9Vc9LI4hrhc7
bMylQaDq8RZv5erZ15KwloZzB8KXvl7C1dPbsEeHhp/x633XzkVM2FfkpPPh
YoLQc7sp93zAxjh9PlhtqIjnTUFsqFTmxPAgvWLbj+xZ3PvdbaRtFFx0lH5T
cPlcllGLAigQ3TQv7Yrkntd6WvMR9dfzgmVwPuKkQ92PY0g4qrD5zfY74tZ6
YuAMEsYWtuw2mI/q082R52uToEooP9p0kOvXn5FBBOq/l3fy5ibEEt+9V8aS
EB3lbO5sIQAizGKB1JWEjILOML14xK0VRudzUP4RfVbJjxFLFpubUhSEtK5a
p6NjgvKHOAVmUBDdaWe6ZB7i+guBXybyIOJQUPOHVYhdwoKKinnw1GpinvY2
7v+26iP2fCi/n9b1VI5YIdFMe8CHxhOBRkIu7vPWTm5Ow53ay5XZ/ogNT9vM
jKdBP2xY93kZF+8dMvkmDff4svBhDOLS/NidaJ7CP3P6IsDxSUUFezprBPj5
N2s6h7gVCHB+059Oph7HBPj9qY7pylqu3v71KQRrtCbHCPD6s3OfO3zj4v31
9bkfHjM2U4Dr7/5eUJl7+1d/hvdmpLa3/+qfso4oCZWY4P6+mjbswBeu3v7+
q4MV5YoyE7w//gezQveSQrx/+33NV5MhQry/1eP0I1TFQrz/7mzhxxtDGXw+
qCjX0hR7Bp+fB3S5pdYuBp8v68RH2s65DD5/HjrxgzzuMfh8KgKnbWt8wuDz
a+1cezauksHne7tfUsahOww+/5XL95wTcPn658N9wOCsqgQGz4/tcMfsMn8G
z5fq1YhEl3kMnr8Uu2Oy9ySD51O1w9+vukeI53eauqbLtFGI5/uw6RWDiGoh
nn+xsY36ZI0Q64OOx02jhmYh1o8nkVT1KU0G68uW+wqzSCmD9Sdu37aXlusY
rE+vv3Ta9F5ksH75T4lJZH8wWN+osyN7bzmKsP4lx47PW58lwvqo/NfsSFm7
COvn3Wdv+wKAxfr6JmyG5YzdLNbfgc3Hg/ffZrE+m0TG3vRqZbF+L9X76W6p
J8b6/rdfo+Y5gRjr/yp5c9wTkRj7Q6yhiV7ZODH2D/Ff5X4LtcXYX4Kvrux+
+ZnF/rMi2FPDtZzF/hQ2x8tQ4xSL/atwKM/AS85ifzuoqnAoWsb+8r+5mg1u
Viz2x73Xv7Q1SVjsn2cstK6dmcRif11hPvW5gTmL/bc0sEbe7sRifybeyPIn
bWaxfw/Keeb4LpvF/h7k65uy/gOL/d/NYGt3nESM7weLO8jFTtFifH/oUT1R
JT4T4/tFzwcTdQ0zAd8/wtKCv97fOgHfT+49PvJqXCni/vvLwh5OXybAf1Pu
Z3Y=
          "]], InsetBox[
          TagBox[
           StyleBox[
            TagBox["g",
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->8.88595041322314],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            8.88595041322314]& ], {5.5548, 10.}, NCache[
          ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]]], 
         LineBox[{{6.499999999998151, 13.5}, {13.49999999999741, 13.5}}], 
         PolygonBox[{{10.6, 13.5}, {9.4, 13.1}, {9.4, 13.9}}], InsetBox[
          TagBox[
           StyleBox[
            TagBox["u",
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->8.88595041322314],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            8.88595041322314]& ], {10., 14.4452}, NCache[
          ImageScaled[{Rational[1, 2], 0}], ImageScaled[{0.5, 0}]]], 
         LineBox[{{6.499999999998151, 6.5}, {13.49999999999741, 6.5}}], 
         PolygonBox[{{9.4, 6.5}, {10.6, 6.1}, {10.6, 6.9}}], InsetBox[
          TagBox[
           StyleBox[
            TagBox["u",
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->8.88595041322314],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            8.88595041322314]& ], {10., 5.5548}, NCache[
          ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]]], 
         {Dashing[{0.030000000000000002`, 0.030000000000000002`}], 
          LineBox[{{13.5, 6.5}, {13.5, 13.5}}]}, 
         PolygonBox[{{13.5, 9.4}, {13.9, 10.6}, {13.1, 10.6}}], InsetBox[
          TagBox[
           StyleBox[
            TagBox[
             SuperscriptBox[
              OverscriptBox["u", "~"], "w"],
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->8.88595041322314],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            8.88595041322314]& ], {12.5548, 10.}, NCache[
          ImageScaled[{1, Rational[1, 2]}], ImageScaled[{1, 0.5}]]], 
         {PointSize[0.04], PointBox[{6.5, 13.5}], PointBox[{6.5, 6.5}], 
          PointBox[{13.5, 6.5}], PointBox[{13.5, 13.5}]}, InsetBox[
          TagBox[
           StyleBox[
            TagBox["4",
             DisplayForm],
            FontFamily->"Helvetica",
            FontSize->7.108760330578512],
           
           StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
            7.108760330578512]& ], {10., -0.5}, NCache[
          ImageScaled[{Rational[1, 2], 0}], ImageScaled[{0.5, 0}]]]},
        "\"aebf/cgdh/efehfggh.m\"",
        TooltipStyle->"TextStyling"],
       Annotation[#, "aebf/cgdh/efehfggh.m", "Tooltip"]& ],
      AspectRatio->1,
      PlotRange->{{-1, 21}, {-1, 21}}], {0, 22}, {0, 0}, {22, 22}], InsetBox[
     TagBox[
      StyleBox[
       TagBox["u",
        DisplayForm],
       FontFamily->"Helvetica",
       FontSize->10.663140495867768`],
      StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
       10.663140495867768`]& ], {24., 69.96}, NCache[
     ImageScaled[{Rational[1, 2], Rational[1, 2]}], ImageScaled[{0.5, 0.5}]]],
     InsetBox[
     TagBox[
      StyleBox[
       TagBox["u",
        DisplayForm],
       FontFamily->"Helvetica",
       FontSize->10.663140495867768`],
      StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
       10.663140495867768`]& ], {28.5, 69.96}, NCache[
     ImageScaled[{Rational[1, 2], Rational[1, 2]}], ImageScaled[{0.5, 0.5}]]],
     InsetBox[
     TagBox[
      StyleBox[
       TagBox["\[RightArrow]",
        DisplayForm],
       FontFamily->"Helvetica",
       FontSize->10.663140495867768`],
      StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
       10.663140495867768`]& ], {33., 69.96}, NCache[
     ImageScaled[{Rational[1, 2], Rational[1, 2]}], ImageScaled[{0.5, 0.5}]]],
     InsetBox[
     TagBox[
      StyleBox[
       TagBox[
        SubsuperscriptBox[
         OverscriptBox["\[Chi]", "~"], "i", "0"],
        DisplayForm],
       FontFamily->"Helvetica",
       FontSize->10.663140495867768`],
      StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
       10.663140495867768`]& ], {37.5, 69.96}, NCache[
     ImageScaled[{Rational[1, 2], Rational[1, 2]}], ImageScaled[{0.5, 0.5}]]],
     InsetBox[
     TagBox[
      StyleBox[
       TagBox[
        SubsuperscriptBox[
         OverscriptBox["\[Chi]", "~"], "j", "0"],
        DisplayForm],
       FontFamily->"Helvetica",
       FontSize->10.663140495867768`],
      StyleForm[#, FontFamily -> "Helvetica", FontSize -> 
       10.663140495867768`]& ], {42., 69.96}, NCache[
     ImageScaled[{Rational[1, 2], Rational[1, 2]}], ImageScaled[{0.5, 0.5}]]]},
   AspectRatio->1.0999999999999999`,
   ImageSize->{512, 256},
   PlotRange->{{0, 66}, {0, 72.6}}], TraditionalForm]], "Print",
 CellChangeTimes->{3.9084482548243*^9, 3.915009678553371*^9},
 CellLabel->
  "During evaluation of \
In[9]:=",ExpressionUUID->"e888fe89-c5ba-4ae8-9a1d-ae010872951e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Convert diagrams to amplitudes", "Subtitle",
 CellChangeTimes->{{3.907140237525999*^9, 
  3.9071402422079525`*^9}},ExpressionUUID->"203b7fca-71a3-405d-8c50-\
adeb00cdca64"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Box", "-", 
    RowBox[{"loop", " ", "diagrams"}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     SubscriptBox["M", "box"], "[", "0", "]"}], "=", 
    RowBox[{
     RowBox[{"FCFAConvert", "[", 
      RowBox[{
       RowBox[{"CreateFeynAmp", "[", "BoxDiagrams", "]"}], ",", " ", 
       RowBox[{"IncomingMomenta", "->", 
        RowBox[{"{", 
         RowBox[{"p1", ",", "p2"}], "}"}]}], ",", " ", 
       RowBox[{"OutgoingMomenta", "->", 
        RowBox[{"{", 
         RowBox[{"pi", ",", "pj"}], "}"}]}], ",", 
       RowBox[{"LoopMomenta", "->", 
        RowBox[{"{", "qloop", "}"}]}], ",", 
       RowBox[{"ChangeDimension", "->", "D"}], ",", 
       RowBox[{"UndoChiralSplittings", "->", "True"}], ",", 
       RowBox[{"List", "->", "True"}], ",", 
       RowBox[{"SMP", "->", "True"}], ",", 
       RowBox[{"DropSumOver", "->", "True"}], ",", 
       RowBox[{"LorentzIndexNames", "->", 
        RowBox[{"{", 
         RowBox[{"\[Mu]", ",", "\[Nu]"}], "}"}]}]}], "]"}], "//.", 
     "AmpSimplifyRules"}]}], ";"}]}]], "Input",
 CellChangeTimes->{{3.906612714223935*^9, 3.906612773436328*^9}, {
   3.906612810442708*^9, 3.906612817076683*^9}, {3.9066128901945043`*^9, 
   3.906612921288426*^9}, {3.906613042267669*^9, 3.9066130435294337`*^9}, {
   3.906701400619747*^9, 3.9067014008293047`*^9}, {3.906701500277868*^9, 
   3.906701501205416*^9}, 3.906701539801108*^9, {3.90670171095228*^9, 
   3.9067017217011614`*^9}, {3.906701813498468*^9, 3.906701814805534*^9}, {
   3.906701952789703*^9, 3.906701957282534*^9}, {3.9067022892775245`*^9, 
   3.906702347870755*^9}, {3.906790339633873*^9, 3.9067903560142555`*^9}, {
   3.9067903921088934`*^9, 3.906790407948275*^9}, {3.9067910216379566`*^9, 
   3.906791038784969*^9}, {3.9067911311625032`*^9, 3.9067911848072753`*^9}, {
   3.9067944990898323`*^9, 3.906794505375362*^9}, {3.9067946301305914`*^9, 
   3.906794639743995*^9}, {3.906795016057407*^9, 3.906795055363448*^9}, {
   3.9067950960910635`*^9, 3.906795135722152*^9}, {3.906795182386944*^9, 
   3.906795216148126*^9}, {3.9070415473964562`*^9, 3.907041547925449*^9}, {
   3.907127475000989*^9, 3.9071274831927795`*^9}, {3.907127629663725*^9, 
   3.907127647198143*^9}, {3.9071319944743814`*^9, 3.907131998613233*^9}, {
   3.907140425774863*^9, 3.9071404389902334`*^9}, {3.907142863414748*^9, 
   3.907142863545401*^9}, {3.9072936855603533`*^9, 3.90729370054619*^9}, {
   3.907294827694759*^9, 3.907294834436476*^9}, 3.90773872003736*^9, 
   3.907934729385539*^9},
 CellLabel->"In[11]:=",ExpressionUUID->"04c0e866-49de-49f0-ad20-600604865abb"],

Cell[BoxData[
 FormBox[
  TemplateBox[{
   "ReplaceRepeated", "reps", 
    "\"\\!\\(\\*FormBox[RowBox[{\\\"{\\\", \\\"AmpSimplifyRules\\\", \
\\\"}\\\"}], TraditionalForm]\\) is neither a list of replacement rules nor a \
valid dispatch table, and so cannot be used for replacing.\"", 2, 11, 3, 
    24944610262854947555, "Local"},
   "MessageTemplate"], TraditionalForm]], "Message", "MSG",
 CellChangeTimes->{3.915009679169088*^9},
 CellLabel->
  "During evaluation of \
In[11]:=",ExpressionUUID->"203fc2ea-7c2e-4654-be78-4abb833b6df1"],

Cell[BoxData[
 FormBox[
  TemplateBox[{
   "ReplaceRepeated", "reps", 
    "\"\\!\\(\\*FormBox[RowBox[{\\\"{\\\", \\\"AmpSimplifyRules\\\", \
\\\"}\\\"}], TraditionalForm]\\) is neither a list of replacement rules nor a \
valid dispatch table, and so cannot be used for replacing.\"", 2, 11, 4, 
    24944610262854947555, "Local"},
   "MessageTemplate"], TraditionalForm]], "Message", "MSG",
 CellChangeTimes->{3.915009679186986*^9},
 CellLabel->
  "During evaluation of \
In[11]:=",ExpressionUUID->"8c0d8408-201f-4626-bcc3-f009cdd3d5b8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Replacing", " ", "couplings"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     SubscriptBox["M", "box"], "[", "1", "]"}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        SubscriptBox["M", "box"], "[", "0", "]"}], "//.", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"SqrtEGl", " ", 
          RowBox[{"Conjugate", "[", "SqrtEGl", "]"}]}], "->", "1"}], "}"}]}], 
      "//.", "QSimplifyRules"}], "//", "Simplify"}]}], ";"}]}]], "Input",
 CellChangeTimes->{{3.906802168451164*^9, 3.9068021891765246`*^9}, 
   3.906802289354131*^9, {3.906802514693864*^9, 3.906802585363904*^9}, {
   3.9068027376313066`*^9, 3.906802767972347*^9}, 3.907041701178212*^9, {
   3.907128205215237*^9, 3.907128251139968*^9}, {3.907128961181194*^9, 
   3.907128983893637*^9}, {3.907129187283352*^9, 3.9071292182311983`*^9}, {
   3.907135831182556*^9, 3.907135834284865*^9}, {3.907135867641944*^9, 
   3.9071359106408253`*^9}, {3.907140478210415*^9, 3.9071404889664598`*^9}, {
   3.907747074748221*^9, 3.907747082061105*^9}, {3.90784470000038*^9, 
   3.907844722660011*^9}, {3.907844946090833*^9, 3.9078449492060156`*^9}, 
   3.907934733265549*^9, {3.907990422581325*^9, 3.9079904397769985`*^9}, {
   3.907993127309368*^9, 3.907993133143283*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"cb5103a7-5fd4-4819-8204-7a6a883a2531"],

Cell[BoxData[
 FormBox[
  TemplateBox[{
   "ReplaceRepeated", "reps", 
    "\"\\!\\(\\*FormBox[RowBox[{\\\"{\\\", \\\"QSimplifyRules\\\", \
\\\"}\\\"}], TraditionalForm]\\) is neither a list of replacement rules nor a \
valid dispatch table, and so cannot be used for replacing.\"", 2, 12, 5, 
    24944610262854947555, "Local"},
   "MessageTemplate"], TraditionalForm]], "Message", "MSG",
 CellChangeTimes->{3.91500967930125*^9},
 CellLabel->
  "During evaluation of \
In[12]:=",ExpressionUUID->"e6c9c16d-e72f-4e31-9e4f-f090bed56e7c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    SubscriptBox["M", "box"], "[", "2", "]"}], "=", 
   RowBox[{"TraceLoopAmp", "/@", 
    RowBox[{
     SubscriptBox["M", "box"], "[", "1", "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.90703765062745*^9, 3.9070376749827147`*^9}, {
   3.907038281588755*^9, 3.907038284441918*^9}, {3.9070383437196336`*^9, 
   3.907038347730852*^9}, {3.907038436463086*^9, 3.907038453975957*^9}, {
   3.9070406516259995`*^9, 3.907040681288546*^9}, {3.907040729566189*^9, 
   3.907040731406032*^9}, {3.907040827828514*^9, 3.907040881857705*^9}, {
   3.90704091514825*^9, 3.907040943337677*^9}, {3.90704170565349*^9, 
   3.907041708211512*^9}, {3.9071363657149673`*^9, 3.9071363750627947`*^9}, {
   3.9077471383306766`*^9, 3.907747150887329*^9}, 3.90793473673492*^9, {
   3.908096994472209*^9, 3.908096998265362*^9}, 3.9082723480224957`*^9, 
   3.908345166906058*^9, 3.908362896150123*^9, {3.9084482744927263`*^9, 
   3.9084482932168036`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"6e1127ee-2fda-4a76-9a0e-b144b5347b0f"],

Cell[BoxData[
 FormBox[
  TemplateBox[{
   "ReplaceRepeated", "reps", 
    "\"\\!\\(\\*FormBox[RowBox[{\\\"{\\\", RowBox[{\\\"TraceLoopAmp\\\", \
\\\"(\\\", \\\"QSimplifyRules\\\", \\\")\\\"}], \\\"}\\\"}], TraditionalForm]\
\\) is neither a list of replacement rules nor a valid dispatch table, and so \
cannot be used for replacing.\"", 2, 13, 6, 24944610262854947555, "Local"},
   "MessageTemplate"], TraditionalForm]], "Message", "MSG",
 CellChangeTimes->{3.91500967962142*^9},
 CellLabel->
  "During evaluation of \
In[13]:=",ExpressionUUID->"9347a48d-47a3-4dc2-b69f-0507109c0f0a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
    RowBox[{
     SubscriptBox["M", "box"], "[", "3", "]"}], "=", 
    RowBox[{"EvalPVLoopAmp", "/@", 
     RowBox[{
      SubscriptBox["M", "box"], "[", "2", "]"}]}]}], ";", 
   "\[IndentingNewLine]", 
   RowBox[{"CheckPVRemainder", "/@", 
    RowBox[{
     SubscriptBox["M", "box"], "[", "3", "]"}]}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.907987766567795*^9, 3.9079877802226253`*^9}, {
   3.907990257299089*^9, 3.907990384073868*^9}, {3.9079911311181774`*^9, 
   3.9079911312391605`*^9}, {3.907991162881385*^9, 3.907991236381234*^9}, {
   3.907991272038875*^9, 3.907991309031263*^9}, {3.907991482085495*^9, 
   3.907991485293128*^9}, {3.9079915190153418`*^9, 3.9079915393703856`*^9}, {
   3.907991604629299*^9, 3.9079916115285854`*^9}, {3.9079916755708885`*^9, 
   3.907991712302314*^9}, {3.907991752224434*^9, 3.907991786864544*^9}, {
   3.9079920339916034`*^9, 3.907992084946117*^9}, {3.907992136804425*^9, 
   3.9079922082977633`*^9}, {3.907992801489115*^9, 3.9079928305039234`*^9}, 
   3.9079931774136696`*^9, {3.9079932076598916`*^9, 3.907993207801955*^9}, {
   3.907993253378702*^9, 3.907993291710308*^9}, {3.907993596301405*^9, 
   3.9079936134161596`*^9}, {3.907993842646984*^9, 3.907993842829084*^9}, {
   3.907993907184254*^9, 3.907993966445823*^9}, {3.907994140778821*^9, 
   3.907994189432312*^9}, 3.9079942476691594`*^9, 3.9082561599697924`*^9},
 CellLabel->"In[14]:=",ExpressionUUID->"85e6ab4e-b3d5-43f2-9a60-636250c392e1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Prefactor", "=", 
  RowBox[{"8", 
   SuperscriptBox["\[Pi]", "2"], " ", 
   SuperscriptBox[
    RowBox[{"SMP", "[", "\"\<g_s\>\"", "]"}], "2"], " ", 
   SuperscriptBox[
    RowBox[{"SMP", "[", "\"\<g_W\>\"", "]"}], "2"], " ", "CF", " ", 
   RowBox[{"SUNFDelta", "[", 
    RowBox[{
     RowBox[{"SUNFIndex", "[", "a", "]"}], ",", 
     RowBox[{"SUNFIndex", "[", "b", "]"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.908270236683572*^9, 3.908270255213845*^9}, {
   3.9082723894121428`*^9, 3.908272391508794*^9}, 3.9083454137073574`*^9, {
   3.908346809398064*^9, 3.908346815032032*^9}, {3.9084469228803625`*^9, 
   3.9084469473269053`*^9}, 3.908448298531935*^9},
 CellLabel->"In[15]:=",ExpressionUUID->"1b107f1f-c941-4d23-a2f5-e06006f05c65"],

Cell[BoxData[
 FormBox[
  RowBox[{"8", " ", 
   SuperscriptBox["\[Pi]", "2"], " ", 
   SubscriptBox["C", "F"], " ", 
   SubsuperscriptBox["g", "s", "2"], " ", 
   SubsuperscriptBox["g", "W", "2"], " ", 
   SubscriptBox["\[Delta]", 
    RowBox[{
     FormBox[
      FormBox["a",
       TraditionalForm],
      TraditionalForm], 
     FormBox[
      FormBox["b",
       TraditionalForm],
      TraditionalForm]}]]}], TraditionalForm]], "Output",
 CellChangeTimes->{3.915009679695516*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"4f5aa86d-2c5b-46b9-b2bf-e994f39f337e"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"temp", "[", "0", "]"}], "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"TID", "[", 
       RowBox[{
        RowBox[{"DiracSimplify", "[", 
         RowBox[{"Contract", "[", 
          RowBox[{"#1", "/", "Prefactor"}], "]"}], "]"}], ",", "qloop", ",", 
        RowBox[{"ToPaVe", "->", "True"}]}], "]"}], "&"}], ")"}], "[", 
    RowBox[{"Part", "[", 
     RowBox[{
      RowBox[{
       SubscriptBox["M", "box"], "[", "2", "]"}], ",", "2"}], "]"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.90824964539229*^9, 3.9082496696826305`*^9}, {
   3.908251183732443*^9, 3.908251184555609*^9}, {3.908252592394227*^9, 
   3.9082526602576976`*^9}, {3.9082561837258596`*^9, 3.908256184884185*^9}, {
   3.908270248102122*^9, 3.908270260688453*^9}, {3.908345438603667*^9, 
   3.908345451850258*^9}, 3.908346826900337*^9},
 CellLabel->"In[16]:=",ExpressionUUID->"619b2dc6-3252-40df-82fc-2a6acbf21eb6"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"temp", "[", "1", "]"}], "=", 
   RowBox[{"FeynAmpDenominatorExplicit", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"#1", "/.", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"h", ":", "PaVe"}], ")"}], "[", "x__", "]"}], ":>", 
         RowBox[{"TrickMandelstam", "[", 
          RowBox[{
           RowBox[{"h", "[", "x", "]"}], ",", "MandelstamParameters"}], 
          "]"}]}]}], "&"}], ")"}], "[", 
     RowBox[{"temp", "[", "0", "]"}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.908249791874787*^9, 3.908249803192612*^9}, {
   3.908251056391539*^9, 3.90825105936785*^9}, {3.9082511709780865`*^9, 
   3.908251196008229*^9}, {3.9082523991556883`*^9, 3.908252403800943*^9}, {
   3.908256187957044*^9, 3.908256224108081*^9}, 3.908256418627824*^9, 
   3.908345517486325*^9, {3.908446663329425*^9, 3.908446665359054*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"646b62ac-9266-4b05-9703-c719800d1999"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"temp", "[", "2", "]"}], "=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Collect2", "[", 
      RowBox[{"#1", ",", "PaVe", ",", 
       RowBox[{"Factoring", "->", 
        RowBox[{"Function", "[", 
         RowBox[{"x", ",", 
          RowBox[{"Factor2", "[", 
           RowBox[{"TrickMandelstam", "[", 
            RowBox[{"x", ",", "MandelstamParameters"}], "]"}], "]"}]}], 
         "]"}]}]}], "]"}], "&"}], ")"}], "[", 
   RowBox[{"temp", "[", "1", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.908256227847098*^9, 3.908256245576637*^9}, 
   3.908446615093356*^9},
 CellLabel->"In[18]:=",ExpressionUUID->"e9df051c-c2ad-49bf-b573-af81533b0b1e"],

Cell[BoxData[
 FormBox[
  FractionBox[
   RowBox[{"TraceLoopAmp", "(", "QSimplifyRules", ")"}], 
   RowBox[{"8", " ", 
    SuperscriptBox["\[Pi]", "2"], " ", 
    SubscriptBox["C", "F"], " ", 
    SubsuperscriptBox["g", "s", "2"], " ", 
    SubsuperscriptBox["g", "W", "2"], " ", 
    SubscriptBox["\[Delta]", 
     RowBox[{
      FormBox[
       FormBox["a",
        TraditionalForm],
       TraditionalForm], 
      FormBox[
       FormBox["b",
        TraditionalForm],
       TraditionalForm]}]]}]], TraditionalForm]], "Output",
 CellChangeTimes->{3.915009679924608*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"541fa94d-85a5-4e76-9de7-673d9329ebe6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Itemp", "[", "0", "]"}], "=", 
  RowBox[{"SquareAmplitudes", "[", 
   RowBox[{
    RowBox[{"temp", "[", "2", "]"}], ",", 
    RowBox[{
     SubscriptBox[
      OverscriptBox["M", "_"], "s"], "[", "0", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.908256249972121*^9, 3.9082562957707143`*^9}, {
  3.9082584015134134`*^9, 3.9082584048926206`*^9}, {3.90836053164987*^9, 
  3.908360540337102*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"4753517b-3cd1-4a00-8222-6c89dbfbc4d5"],

Cell[BoxData[
 FormBox[
  RowBox[{"SquareAmplitudes", "(", 
   RowBox[{
    FractionBox[
     RowBox[{"TraceLoopAmp", "(", "QSimplifyRules", ")"}], 
     RowBox[{"8", " ", 
      SuperscriptBox["\[Pi]", "2"], " ", 
      SubscriptBox["C", "F"], " ", 
      SubsuperscriptBox["g", "s", "2"], " ", 
      SubsuperscriptBox["g", "W", "2"], " ", 
      SubscriptBox["\[Delta]", 
       RowBox[{
        FormBox[
         FormBox["a",
          TraditionalForm],
         TraditionalForm], 
        FormBox[
         FormBox["b",
          TraditionalForm],
         TraditionalForm]}]]}]], ",", 
    RowBox[{
     SubscriptBox[
      OverscriptBox["M", "_"], "s"], "(", "0", ")"}]}], ")"}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{3.915009679979239*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"0bf8ce76-fce5-4ccf-a822-c48e771bb401"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["M", "box"], "[", "4", "]"}], "=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"SelectNotFree2", "[", 
      RowBox[{"#1", ",", 
       RowBox[{"{", 
        RowBox[{"A0", ",", "B0", ",", "C0", ",", "D0"}], "}"}]}], "]"}], 
     "&"}], ")"}], "/@", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{
      SubscriptBox["M", "box"], "[", "3", "]"}], ",", "CheckPVRemainder"}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.907994190966035*^9, 3.9079942102789135`*^9}, {
  3.907994665379531*^9, 3.907994707601545*^9}, {3.9079947440360365`*^9, 
  3.907994755013025*^9}, {3.9080031098703985`*^9, 3.908003120161074*^9}, {
  3.9080959918204613`*^9, 3.9080959945096645`*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"ae966fcc-8ff0-45c1-a98e-3c49f4a8d369"],

Cell[BoxData[
 FormBox[
  RowBox[{
   SubscriptBox["M", "box"], "(", ")"}], TraditionalForm]], "Output",
 CellChangeTimes->{3.9150096800360937`*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"6c56d945-00d9-4a88-8fc7-3dee86653083"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["I", "sbox"], "[", "0", "]"}], "=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"SquareAmplitudes", "[", 
        RowBox[{"#1", ",", 
         RowBox[{
          SubscriptBox[
           OverscriptBox["M", "_"], "s"], "[", "0", "]"}]}], "]"}], "//.", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"SqrtEGl", " ", 
          RowBox[{"Conjugate", "[", "SqrtEGl", "]"}]}], "->", "1"}], "}"}]}], 
      "//.", "SuperChargeRules"}], "//", 
     RowBox[{"FullSimplify", "&"}]}], ")"}], "/@", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"ReplaceAll", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"Index", "[", 
            RowBox[{"Sfermion", ",", "5"}], "]"}], "->", "A"}], ",", 
          RowBox[{
           RowBox[{"Index", "[", 
            RowBox[{"Sfermion", ",", "6"}], "]"}], "->", "C"}]}], "}"}]}], 
       "]"}], "&"}], ")"}], "/@", 
    RowBox[{
     SubscriptBox["M", "box"], "[", "4", "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   SubscriptBox["I", "tbox"], "[", "0", "]"}], "=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"SquareAmplitudes", "[", 
        RowBox[{"#1", ",", 
         RowBox[{"ReplaceAll", "[", 
          RowBox[{
           RowBox[{
            SubscriptBox[
             OverscriptBox["M", "_"], "t"], "[", "0", "]"}], ",", 
           RowBox[{"A", "->", "C"}]}], "]"}]}], "]"}], "//.", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"SqrtEGl", " ", 
          RowBox[{"Conjugate", "[", "SqrtEGl", "]"}]}], "->", "1"}], "}"}]}], 
      "//.", "SuperChargeRules"}], "//", 
     RowBox[{"FullSimplify", "&"}]}], ")"}], "/@", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"ReplaceAll", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"Index", "[", 
            RowBox[{"Sfermion", ",", "5"}], "]"}], "->", "A"}], ",", 
          RowBox[{
           RowBox[{"Index", "[", 
            RowBox[{"Sfermion", ",", "6"}], "]"}], "->", "C"}]}], "}"}]}], 
       "]"}], "&"}], ")"}], "/@", 
    RowBox[{
     SubscriptBox["M", "box"], "[", "4", "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   SubscriptBox["I", "ubox"], "[", "0", "]"}], "=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"SquareAmplitudes", "[", 
        RowBox[{"#1", ",", 
         RowBox[{"ReplaceAll", "[", 
          RowBox[{
           RowBox[{
            SubscriptBox[
             OverscriptBox["M", "_"], "u"], "[", "0", "]"}], ",", 
           RowBox[{"A", "->", "C"}]}], "]"}]}], "]"}], "//.", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"SqrtEGl", " ", 
          RowBox[{"Conjugate", "[", "SqrtEGl", "]"}]}], "->", "1"}], "}"}]}], 
      "//.", "SuperChargeRules"}], "//", 
     RowBox[{"FullSimplify", "&"}]}], ")"}], "/@", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"ReplaceAll", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"Index", "[", 
            RowBox[{"Sfermion", ",", "5"}], "]"}], "->", "A"}], ",", 
          RowBox[{
           RowBox[{"Index", "[", 
            RowBox[{"Sfermion", ",", "6"}], "]"}], "->", "C"}]}], "}"}]}], 
       "]"}], "&"}], ")"}], "/@", 
    RowBox[{
     SubscriptBox["M", "box"], "[", "4", "]"}]}]}]}]}], "Input",
 CellChangeTimes->{{3.90662328384569*^9, 3.9066233729926386`*^9}, {
   3.906791310466491*^9, 3.906791340241352*^9}, {3.906791467213002*^9, 
   3.9067914863385954`*^9}, {3.906795295983741*^9, 3.9067953028064337`*^9}, {
   3.906795499567736*^9, 3.90679551939712*^9}, {3.906795618947641*^9, 
   3.9067956314554987`*^9}, {3.906795974579964*^9, 3.9067959892813325`*^9}, {
   3.906802226737943*^9, 3.90680223255614*^9}, {3.906802983963008*^9, 
   3.9068029931350737`*^9}, {3.906803103388632*^9, 3.906803164547058*^9}, {
   3.9068032286841974`*^9, 3.906803228788503*^9}, {3.9068033290184946`*^9, 
   3.906803369403195*^9}, {3.906804004690523*^9, 3.906804008631571*^9}, {
   3.906804142189466*^9, 3.906804153896907*^9}, {3.906804540089271*^9, 
   3.906804541476158*^9}, {3.906804640792431*^9, 3.9068046575477905`*^9}, {
   3.9068050946095266`*^9, 3.906805098712882*^9}, {3.9068051687974105`*^9, 
   3.906805194659725*^9}, {3.9068052757451468`*^9, 3.906805285924741*^9}, {
   3.906807387547561*^9, 3.906807406348351*^9}, {3.9068074543119965`*^9, 
   3.906807461110417*^9}, {3.907041903312705*^9, 3.9070419896392527`*^9}, {
   3.907123477035554*^9, 3.907123483835676*^9}, {3.9071294916025143`*^9, 
   3.907129525503175*^9}, 3.907130003186899*^9, {3.907131594657641*^9, 
   3.907131611629773*^9}, {3.90713669718969*^9, 3.9071367014129715`*^9}, {
   3.9071368168025084`*^9, 3.907136835918872*^9}, {3.907294080795638*^9, 
   3.9072940940057945`*^9}, {3.907294184456217*^9, 3.907294184527032*^9}, {
   3.907743779085422*^9, 3.9077438000228624`*^9}, {3.9077439125314846`*^9, 
   3.907743941852507*^9}, {3.9077440124851255`*^9, 3.9077440182422156`*^9}, {
   3.907744353130636*^9, 3.907744381257751*^9}, {3.907744626832967*^9, 
   3.9077446335611467`*^9}, {3.907747191536368*^9, 3.907747260652845*^9}, {
   3.9077484452854033`*^9, 3.907748447300434*^9}, {3.9077486676066008`*^9, 
   3.9077486761608353`*^9}, {3.9077491358194585`*^9, 
   3.9077491650456247`*^9}, {3.907756368833596*^9, 3.907756381822027*^9}, {
   3.90776604847248*^9, 3.907766141185373*^9}, {3.907768696058305*^9, 
   3.9077687676466446`*^9}, {3.907825917940975*^9, 3.907825919158108*^9}, {
   3.907826062795785*^9, 3.9078260648866677`*^9}, {3.907826300629297*^9, 
   3.907826306185057*^9}, {3.9078264524342084`*^9, 3.907826457471341*^9}, {
   3.907832737997115*^9, 3.907832741692648*^9}, {3.9078327874871416`*^9, 
   3.907832822636524*^9}, {3.90784529981153*^9, 3.907845305318989*^9}, {
   3.907917778087852*^9, 3.9079177811028132`*^9}, {3.907935363116578*^9, 
   3.907935363301612*^9}, {3.9079354966591887`*^9, 3.9079354982140336`*^9}, {
   3.908096056232407*^9, 3.9080960950781593`*^9}, {3.908096126909845*^9, 
   3.908096298680457*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"d9a6080c-a8a4-44cf-8b2f-d389ad133d7e"],

Cell[BoxData[
 FormBox[
  TemplateBox[{
   "ReplaceRepeated", "reps", 
    "\"\\!\\(\\*FormBox[RowBox[{\\\"{\\\", \\\"SuperChargeRules\\\", \
\\\"}\\\"}], TraditionalForm]\\) is neither a list of replacement rules nor a \
valid dispatch table, and so cannot be used for replacing.\"", 2, 21, 7, 
    24944610262854947555, "Local"},
   "MessageTemplate"], TraditionalForm]], "Message", "MSG",
 CellChangeTimes->{3.915009680085541*^9},
 CellLabel->
  "During evaluation of \
In[21]:=",ExpressionUUID->"27a96917-2dc1-456e-ae17-42642d1bc4e2"],

Cell[BoxData[
 FormBox[
  RowBox[{
   SubscriptBox["M", "box"], "(", ")"}], TraditionalForm]], "Output",
 CellChangeTimes->{3.915009680095377*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"a6d71921-425d-4007-bf26-ccb722a56f5e"],

Cell[BoxData[
 FormBox[
  TemplateBox[{
   "ReplaceRepeated", "reps", 
    "\"\\!\\(\\*FormBox[RowBox[{\\\"{\\\", \\\"SuperChargeRules\\\", \
\\\"}\\\"}], TraditionalForm]\\) is neither a list of replacement rules nor a \
valid dispatch table, and so cannot be used for replacing.\"", 2, 22, 8, 
    24944610262854947555, "Local"},
   "MessageTemplate"], TraditionalForm]], "Message", "MSG",
 CellChangeTimes->{3.9150096800969543`*^9},
 CellLabel->
  "During evaluation of \
In[21]:=",ExpressionUUID->"0f26e168-41d2-4438-9e7e-cf4f109ff66a"],

Cell[BoxData[
 FormBox[
  RowBox[{
   SubscriptBox["M", "box"], "(", ")"}], TraditionalForm]], "Output",
 CellChangeTimes->{3.915009680104805*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"f6f8bd45-3796-4651-be8a-04396cf11195"],

Cell[BoxData[
 FormBox[
  TemplateBox[{
   "ReplaceRepeated", "reps", 
    "\"\\!\\(\\*FormBox[RowBox[{\\\"{\\\", \\\"SuperChargeRules\\\", \
\\\"}\\\"}], TraditionalForm]\\) is neither a list of replacement rules nor a \
valid dispatch table, and so cannot be used for replacing.\"", 2, 23, 9, 
    24944610262854947555, "Local"},
   "MessageTemplate"], TraditionalForm]], "Message", "MSG",
 CellChangeTimes->{3.915009680106226*^9},
 CellLabel->
  "During evaluation of \
In[21]:=",ExpressionUUID->"8a72c890-1431-4183-8fcf-5a43a3658e03"],

Cell[BoxData[
 FormBox[
  RowBox[{
   SubscriptBox["M", "box"], "(", ")"}], TraditionalForm]], "Output",
 CellChangeTimes->{3.9150096801137047`*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"08760a93-3191-4ba1-9812-eac6bd0aff17"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReduceMandelstam", "[", 
  RowBox[{
   SubscriptBox["I", "sbox"], "[", "0", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.907756942246512*^9, 3.907757018432624*^9}, {
   3.907757211400583*^9, 3.907757357108426*^9}, {3.907757408504327*^9, 
   3.90775747887021*^9}, {3.907770874693241*^9, 3.907770890178594*^9}, {
   3.9077737668217382`*^9, 3.907773851323777*^9}, {3.907773884401319*^9, 
   3.907774024034376*^9}, {3.907774069491194*^9, 3.907774107960844*^9}, {
   3.907826313743219*^9, 3.907826334845049*^9}, {3.907826572595106*^9, 
   3.907826572659055*^9}, {3.907826773223739*^9, 3.907826773312063*^9}, {
   3.9078268745936155`*^9, 3.9078269020862265`*^9}, 3.907827102537263*^9, {
   3.907843679253677*^9, 3.9078436892745233`*^9}, 3.9079950836521044`*^9},
 CellLabel->"In[24]:=",ExpressionUUID->"f21452df-45ca-4654-abf0-f26947526e87"],

Cell[BoxData[
 FormBox[
  RowBox[{"ReduceMandelstam", "(", 
   RowBox[{
    SubscriptBox["M", "box"], "(", ")"}], ")"}], TraditionalForm]], "Output",
 CellChangeTimes->{3.915009680154489*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"d1819e37-4c32-4848-b30b-3dc6a864a20c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     RowBox[{"Collect2", "[", 
      RowBox[{
       RowBox[{"SelectFree2", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"ChangeDimension", "[", 
           RowBox[{"#1", ",", "4"}], "]"}], "//", "DiracSimplify"}], ",", 
         "FeynCalc`Eps"}], "]"}], ",", "D0"}], "]"}], "//", 
     "FeynAmpDenominatorExplicit"}], "//", 
    RowBox[{"DiracSimplify", "&"}]}], ")"}], "/@", 
  RowBox[{"ReplaceAll", "[", 
   RowBox[{
    RowBox[{
     SubscriptBox["I", "sbox"], "[", "0", "]"}], ",", 
    RowBox[{"D", "->", "4"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.907750206112835*^9, 3.907750216174127*^9}, {
  3.9077502493032637`*^9, 3.907750318412619*^9}, {3.908096353916506*^9, 
  3.908096365715748*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"fb35639d-cc50-4fc0-aca4-f3461a6fd2fa"],

Cell[BoxData[
 FormBox[
  RowBox[{
   SubscriptBox["M", "box"], "(", ")"}], TraditionalForm]], "Output",
 CellChangeTimes->{3.915009680200506*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"9f58bde9-36ad-427e-87ab-4f56597d71c8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Collect2", "[", 
  RowBox[{"%", ",", "D0"}], "]"}]], "Input",
 CellChangeTimes->{{3.907862003181373*^9, 3.907862007548493*^9}, {
  3.907862064024412*^9, 3.907862120783631*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"3e911647-7928-4c18-8b15-bce77313c58e"],

Cell[BoxData[
 FormBox[
  RowBox[{
   SubscriptBox["M", "box"], "(", ")"}], TraditionalForm]], "Output",
 CellChangeTimes->{3.915009680303918*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"77dc76f7-d0de-4d10-9bdf-3bf620f9c654"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "Replacement", " ", "rules", " ", "for", " ", "limit", " ", "of", " ", 
     "D"}], "->", 
    RowBox[{
     RowBox[{"4", " ", "of", " ", "Passarino"}], "-", 
     RowBox[{"Veltman", " ", "functions"}]}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"PaVeEvalRules", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"D0", "[", 
        RowBox[{"args__", ",", "m1_", ",", "m2_", ",", "m3_", ",", "m4_"}], 
        "]"}], ":>", 
       RowBox[{"LoopRefine", "[", 
        RowBox[{"PVD", "[", 
         RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "args", ",", 
          SuperscriptBox["m1", 
           RowBox[{"1", "/", "2"}]], ",", 
          SuperscriptBox["m2", 
           RowBox[{"1", "/", "2"}]], ",", 
          SuperscriptBox["m3", 
           RowBox[{"1", "/", "2"}]], ",", 
          SuperscriptBox["m4", 
           RowBox[{"1", "/", "2"}]]}], "]"}], "]"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{
  3.906623602867426*^9, {3.906629069252453*^9, 3.906629076444112*^9}, {
   3.906694869635987*^9, 3.906694885227427*^9}, 3.9066949604499483`*^9, 
   3.906708290927346*^9, 3.907042066312213*^9, {3.9070421437664394`*^9, 
   3.907042151666258*^9}, {3.907058397982767*^9, 3.9070584655301943`*^9}, {
   3.907058525041278*^9, 3.907058535808138*^9}, {3.907115686242059*^9, 
   3.907115703818493*^9}, {3.9071179662170115`*^9, 3.90711796731195*^9}, {
   3.907120780283623*^9, 3.907120824113903*^9}, {3.907120929493049*^9, 
   3.907120952272603*^9}, {3.907121009956694*^9, 3.907121011808729*^9}, 
   3.90712347026746*^9, {3.9071235037779326`*^9, 3.907123521746223*^9}, {
   3.907140831482083*^9, 3.907140837060303*^9}, {3.9071408854398804`*^9, 
   3.907140990337926*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"abeb3fdc-b6cc-428e-9145-f0570c1054d1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     SubscriptBox["I", "sbox"], "[", "1", "]"}], "=", 
    RowBox[{
     RowBox[{"PaVeOrder", "[", 
      RowBox[{
       SubscriptBox["I", "sbox"], "[", "0", "]"}], "]"}], "//.", 
     "PaVeEvalRules"}]}], ";"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{
  3.9068022994540973`*^9, {3.90680747867935*^9, 3.906807595989978*^9}, {
   3.907036058735956*^9, 3.907036062953339*^9}, {3.90704207699882*^9, 
   3.9070420935030794`*^9}, {3.907043056196751*^9, 3.9070430838443136`*^9}, {
   3.907120965822841*^9, 3.907120967429048*^9}, {3.907121045362218*^9, 
   3.907121048915899*^9}, {3.907121094957148*^9, 3.9071211108948236`*^9}, {
   3.907123486563639*^9, 3.9071234890744953`*^9}, {3.907123554795353*^9, 
   3.907123561370672*^9}, 3.907123668709698*^9, {3.907123856495623*^9, 
   3.9071238882346473`*^9}, {3.9071240291640844`*^9, 
   3.9071240741295156`*^9}, {3.9071407950489483`*^9, 3.907140796476464*^9}, 
   3.907748433026356*^9, 3.907756474285708*^9},
 CellLabel->"In[28]:=",ExpressionUUID->"9683da56-1ac5-48e0-ada5-f244d4eb472c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Collect2", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"SelectFree2", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ChangeDimension", "[", 
        RowBox[{
         RowBox[{"ReplaceAll", "[", 
          RowBox[{
           RowBox[{
            SubscriptBox["I", "sbox"], "[", "0", "]"}], ",", 
           RowBox[{"D", "->", "4"}]}], "]"}], ",", "4"}], "]"}], "//", 
       "DiracSimplify"}], ",", "FeynCalc`Eps"}], "]"}], "//", "Simplify"}], 
   ",", "D0"}], "]"}]], "Input",
 CellChangeTimes->{
  3.907036355023609*^9, {3.907036438082798*^9, 3.9070364556578054`*^9}, {
   3.9070365331045017`*^9, 3.90703654611129*^9}, {3.90705381249308*^9, 
   3.907054002505883*^9}, {3.907123631399299*^9, 3.907123662629257*^9}, {
   3.9071237532139072`*^9, 3.9071237674490213`*^9}, {3.907123847838726*^9, 
   3.907123850532539*^9}, {3.907124307604824*^9, 3.907124348931096*^9}, {
   3.907129056625665*^9, 3.9071290951622205`*^9}, {3.907293652913146*^9, 
   3.907293655193312*^9}, 3.907756468806569*^9, {3.9077567505541515`*^9, 
   3.907756782946288*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"5f7a00a3-b739-405e-8c00-f41e52277fba"],

Cell[BoxData[
 FormBox[
  RowBox[{
   SubscriptBox["M", "box"], "(", ")"}], TraditionalForm]], "Output",
 CellChangeTimes->{3.915009680363195*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"eb2d4386-2ffc-474d-b509-79d63a8cbc49"]
}, Open  ]],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{3.908098598470815*^9},
 CellLabel->"In[30]:=",ExpressionUUID->"c2975daa-f821-4946-98b1-75f1aa06df92"]
}, Open  ]]
},
Evaluator->"Local",
WindowSize->{1383, 765},
WindowMargins->{{-2.25, Automatic}, {Automatic, -22.5}},
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"], 
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
Magnification:>1.2 Inherited,
FrontEndVersion->"14.0 for Linux x86 (64-bit) (December 12, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"2406be3d-3002-49cd-b236-69606bdea365"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 2444, 49, 269, "Code",ExpressionUUID->"d58c0d61-2f86-44c4-9987-1aa47ea7b92b",
 InitializationCell->False],
Cell[3027, 73, 377, 9, 33, "Message",ExpressionUUID->"39042113-4174-413c-b911-b3a45b5c5aac"],
Cell[3407, 84, 156, 2, 40, "Output",ExpressionUUID->"ce0ccad1-cbde-4f25-99ae-17fa84b99ae0"],
Cell[3566, 88, 384, 10, 33, "Message",ExpressionUUID->"1ddf6934-0ff4-4fd3-96eb-32462f981d2d"],
Cell[3953, 100, 154, 2, 40, "Output",ExpressionUUID->"322790e9-4f03-49a0-a991-c7d76d74eb9a"]
}, Open  ]],
Cell[4122, 105, 406, 10, 61, "Input",ExpressionUUID->"7250dd46-7286-4c14-b071-5d36007ccb97"],
Cell[CellGroupData[{
Cell[4553, 119, 166, 3, 63, "Subtitle",ExpressionUUID->"2b889070-5833-462e-8e31-bd89c1d98428"],
Cell[CellGroupData[{
Cell[4744, 126, 3755, 82, 171, "Input",ExpressionUUID->"888d81c6-8914-4b27-8a0f-317975cc5513"],
Cell[8502, 210, 28680, 658, 316, "Print",ExpressionUUID->"e888fe89-c5ba-4ae8-9a1d-ae010872951e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[37231, 874, 178, 3, 63, "Subtitle",ExpressionUUID->"203b7fca-71a3-405d-8c50-adeb00cdca64"],
Cell[CellGroupData[{
Cell[37434, 881, 2626, 50, 115, "Input",ExpressionUUID->"04c0e866-49de-49f0-ad20-600604865abb"],
Cell[40063, 933, 538, 12, 33, "Message",ExpressionUUID->"203fc2ea-7c2e-4654-be78-4abb833b6df1"],
Cell[40604, 947, 538, 12, 33, "Message",ExpressionUUID->"8c0d8408-201f-4626-bcc3-f009cdd3d5b8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[41179, 964, 1410, 29, 63, "Input",ExpressionUUID->"cb5103a7-5fd4-4819-8204-7a6a883a2531"],
Cell[42592, 995, 535, 12, 33, "Message",ExpressionUUID->"e6c9c16d-e72f-4e31-9e4f-f090bed56e7c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[43164, 1012, 1054, 19, 35, "Input",ExpressionUUID->"6e1127ee-2fda-4a76-9a0e-b144b5347b0f"],
Cell[44221, 1033, 586, 12, 33, "Message",ExpressionUUID->"9347a48d-47a3-4dc2-b69f-0507109c0f0a"]
}, Open  ]],
Cell[44822, 1048, 1497, 27, 61, "Input",ExpressionUUID->"85e6ab4e-b3d5-43f2-9a60-636250c392e1"],
Cell[CellGroupData[{
Cell[46344, 1079, 766, 16, 35, "Input",ExpressionUUID->"1b107f1f-c941-4d23-a2f5-e06006f05c65"],
Cell[47113, 1097, 564, 18, 44, "Output",ExpressionUUID->"4f5aa86d-2c5b-46b9-b2bf-e994f39f337e"]
}, Open  ]],
Cell[47692, 1118, 957, 23, 35, "Input",ExpressionUUID->"619b2dc6-3252-40df-82fc-2a6acbf21eb6"],
Cell[48652, 1143, 1018, 23, 38, "Input",ExpressionUUID->"646b62ac-9266-4b05-9703-c719800d1999"],
Cell[CellGroupData[{
Cell[49695, 1170, 697, 18, 35, "Input",ExpressionUUID->"e9df051c-c2ad-49bf-b573-af81533b0b1e"],
Cell[50395, 1190, 653, 20, 68, "Output",ExpressionUUID->"541fa94d-85a5-4e76-9de7-673d9329ebe6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[51085, 1215, 511, 12, 38, "Input",ExpressionUUID->"4753517b-3cd1-4a00-8222-6c89dbfbc4d5"],
Cell[51599, 1229, 839, 26, 71, "Output",ExpressionUUID->"0bf8ce76-fce5-4ccf-a822-c48e771bb401"]
}, Open  ]],
Cell[CellGroupData[{
Cell[52475, 1260, 815, 21, 35, "Input",ExpressionUUID->"ae966fcc-8ff0-45c1-a98e-3c49f4a8d369"],
Cell[53293, 1283, 227, 5, 39, "Output",ExpressionUUID->"6c56d945-00d9-4a88-8fc7-3dee86653083"]
}, Open  ]],
Cell[CellGroupData[{
Cell[53557, 1293, 6295, 149, 168, "Input",ExpressionUUID->"d9a6080c-a8a4-44cf-8b2f-d389ad133d7e"],
Cell[59855, 1444, 538, 12, 33, "Message",ExpressionUUID->"27a96917-2dc1-456e-ae17-42642d1bc4e2"],
Cell[60396, 1458, 225, 5, 39, "Output",ExpressionUUID->"a6d71921-425d-4007-bf26-ccb722a56f5e"],
Cell[60624, 1465, 540, 12, 33, "Message",ExpressionUUID->"0f26e168-41d2-4438-9e7e-cf4f109ff66a"],
Cell[61167, 1479, 225, 5, 39, "Output",ExpressionUUID->"f6f8bd45-3796-4651-be8a-04396cf11195"],
Cell[61395, 1486, 538, 12, 33, "Message",ExpressionUUID->"8a72c890-1431-4183-8fcf-5a43a3658e03"],
Cell[61936, 1500, 227, 5, 39, "Output",ExpressionUUID->"08760a93-3191-4ba1-9812-eac6bd0aff17"]
}, Open  ]],
Cell[CellGroupData[{
Cell[62200, 1510, 859, 13, 35, "Input",ExpressionUUID->"f21452df-45ca-4654-abf0-f26947526e87"],
Cell[63062, 1525, 270, 6, 39, "Output",ExpressionUUID->"d1819e37-4c32-4848-b30b-3dc6a864a20c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[63369, 1536, 862, 23, 61, "Input",ExpressionUUID->"fb35639d-cc50-4fc0-aca4-f3461a6fd2fa"],
Cell[64234, 1561, 225, 5, 39, "Output",ExpressionUUID->"9f58bde9-36ad-427e-87ab-4f56597d71c8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[64496, 1571, 279, 5, 35, "Input",ExpressionUUID->"3e911647-7928-4c18-8b15-bce77313c58e"],
Cell[64778, 1578, 225, 5, 39, "Output",ExpressionUUID->"77dc76f7-d0de-4d10-9bdf-3bf620f9c654"]
}, Open  ]],
Cell[65018, 1586, 1890, 42, 88, "Input",ExpressionUUID->"abeb3fdc-b6cc-428e-9145-f0570c1054d1"],
Cell[66911, 1630, 1102, 22, 61, "Input",ExpressionUUID->"9683da56-1ac5-48e0-ada5-f244d4eb472c"],
Cell[CellGroupData[{
Cell[68038, 1656, 1146, 25, 35, "Input",ExpressionUUID->"5f7a00a3-b739-405e-8c00-f41e52277fba"],
Cell[69187, 1683, 225, 5, 39, "Output",ExpressionUUID->"eb2d4386-2ffc-474d-b509-79d63a8cbc49"]
}, Open  ]],
Cell[69427, 1691, 166, 2, 61, "Input",ExpressionUUID->"c2975daa-f821-4946-98b1-75f1aa06df92"]
}, Open  ]]
}
]
*)

